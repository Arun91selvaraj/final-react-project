https://github.com/joydip-git/Verizon-reactjs-30thoct2023

React JS learning curve:
HTML, CSS
JavaScript and/or TypeScript
Node JS (introductory idea)

Cascading Style Sheet:

propname:value
text-align:center

1. in-line style:
	<element style="">content</element>

2. out-line style
	a. in the same HTML file using <style> in either <head> or <body> elements
	b. outside the HTML file, using separate CSS file. Link the CSS file with HTML file using <link> tag in <head> or <body> elements

	i. element selector
		element-name1, element-name2,....{
			css-prop-name: value,
			...............
		}

	ii. id selector
		#element-id1, #element-id2,....{
			css-prop-name: value,
			...............
		}
	iii. class selector
	.css-class-name{
		css-prop-name: value,
			...............
	}
	design:
	<element class="css-class-name">content</element>

	precedence: (cascading effect)
	lowest>highest

	browser>outline>inline

JavaScript:

	JS Engines:
	chrome: V8
	safari: JSCore
	firefox: spidermonkey

	features:
	a. it is loosely typed language

Ryan Dahl

	data types:
	string, number, boolean, object, function
	undefined, NULL, Infinity, NaN

	techniques to create object in JS: 
	a. object-literal syntax
	b. constructor function syntax
	c. class keyword

compilation and execution of JS:

global scope or function
other functions

execution context is created whenever a function is called (global or any other function)
contains 3 properties: variable object (vo), this and scope

a. preparation (compilation) stage:
	only variable and function "declarations" are taken care of
	variables of a function are hoisted
	function "declarations" are hosited
	function "expressions" are NOT hoisted
	hence, expression function can't be called before the expression
	hence, declared functions can be called before declaration
b. execution stage

function add(a,b){
	this.x = 100
	var r = a+b
	return r
}
var res = new add(12,13)
console.log(res)

add() => the method is contextually bound to the default object (window/global) or none at all if strict mode is on (this => window/global)
new add() => the method is contextually bound to the new object (this => new object)
obj-ref.add() => the method is contextually bound to that object (this => object)

var globalValue = 50
function outer1(){
	var a =100
	function outer2(){
		var b = 200
		funcion innerMost(){
			var c = 300
			clg(a+b+c+globalValue)
		}
	}
}

closure: maintaining the lexical state of outer scopes for an inner function

new features of JS:
let and const keyword
arrow function
string interpolation/templated string
spread operator
rest operator
object destructuring
class, constructor, super, extends keywords
.....





